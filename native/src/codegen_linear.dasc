#include <stdlib.h>
#include <Windows.h>

#include "dynasm/dasm_proto.h"
#include "dynasm/dasm_x86.h"
#include "codegen.h"
#include "opcodes.h"

|.arch x64
|.section code
|.globals GLOB_
|.actionlist actionlist

#ifndef _MM_SHUFFLE
#define _MM_SHUFFLE(x,y,z,w) ((z << 6) | (y <<4) | (x << 2) | (w))
#endif

static void matrix_transpose(dasm_State** Dst) {
  // expect matrix to be in xmm8-xmm11
  | movaps xmm0, xmm8
  | movaps xmm2, xmm0
  | movaps xmm1, xmm9
  | shufps xmm0, xmm1, 0x88
  | shufps xmm2, xmm1, 0xdd
  | movaps xmm3, xmm10
  | movaps xmm5, xmm3
  | movaps xmm6, xmm11
  | shufps xmm3, xmm6, 0x88
  | shufps xmm5, xmm6, 0xdd
  | movaps xmm1, xmm0
  | shufps xmm0, xmm3, 0x88
  | movaps xmm4, xmm2
  | shufps xmm2, xmm5, 0x88
  | shufps xmm1, xmm3, 0xdd
  | shufps xmm4, xmm6, 0xdd
  // store back into first
  | movaps xmm8, xmm0
  | movaps xmm9, xmm2
  | movaps xmm10, xmm1
  | movaps xmm11, xmm4
}

static void linearProduct(dasm_State** Dst) {
  // assume matrix to be in xmm8-xmm11
  | movaps xmm1, xmm0
  | shufps xmm1, xmm1, _MM_SHUFFLE(0, 0, 0, 0)
  | movaps xmm2, xmm0
  | shufps xmm2, xmm2, _MM_SHUFFLE(1, 1, 1, 1)
  | movaps xmm3, xmm0
  | shufps xmm3, xmm3, _MM_SHUFFLE(2, 2, 2, 2)
  | movaps xmm4, xmm0
  | shufps xmm4, xmm4, _MM_SHUFFLE(3, 3, 3, 3)
  | movaps xmm0, xmm8
  | mulps xmm0, xmm1
  | movaps xmm1, xmm9
  | mulps xmm1, xmm2
  | movaps xmm2, xmm10
  | mulps xmm2, xmm3
  | movaps xmm3, xmm11
  | mulps xmm3, xmm4
  | addps xmm0, xmm1
  | addps xmm2, xmm3
  | addps xmm0, xmm2
}

static void load_second(dasm_State** Dst) {
  | mov r8, [rcx]
  | add rcx, 16
  | movaps xmm12, [rcx]
  | movaps xmm13, [rcx+4*4]
  | movaps xmm14, [rcx+4*8]
  | movaps xmm15, [rcx+4*12]
}

static void load_first(dasm_State** Dst) {
  | mov r8, [rcx]
  | add rcx, 16
  | movaps xmm8, [rcx]
  | movaps xmm9, [rcx+4*4]
  | movaps xmm10, [rcx+4*8]
  | movaps xmm11, [rcx+4*12]
}

static void store_second(dasm_State** Dst) {
  | mov r8, [rcx]
  | add rcx, 16
  | movaps [rcx], xmm12
  | movaps [rcx+4*4], xmm13
  | movaps [rcx+4*8], xmm14
  | movaps [rcx+4*12], xmm15
}

static void store_first(dasm_State** Dst) {
  | mov r8, [rcx]
  | add rcx, 16
  | movaps [rcx], xmm8
  | movaps [rcx+4*4], xmm9
  | movaps [rcx+4*8], xmm10
  | movaps [rcx+4*12], xmm11
}

static void mul_matrix_matrix(dasm_State** Dst) {
  // obtain second matrix
  | mov r9, [rcx]
  | add rcx, 16
  for (int i = 0; i < 4; i++) {
    // load from second
    if (i == 0) {
      | movaps xmm0, xmm12
    } else if (i == 1) {
      | movaps xmm0, xmm13
    } else if (i == 2) {
      | movaps xmm0, xmm14
    } else if (i == 3) {
      | movaps xmm0, xmm15
    }
    linearProduct(Dst);
    // store into first
    if (i == 0) {
      | movaps xmm8, xmm0
    } else if (i == 1) {
      | movaps xmm9, xmm0
    } else if (i == 2) {
      | movaps xmm10, xmm0
    } else if (i == 3) {
      | movaps xmm11, xmm0
    }
  }
}

static void rotateY(dasm_State** Dst) {
  | movss xmm0, dword [rcx] // sin
  | add rcx, 4
  | movss xmm1, dword [rcx] // cos
  | add rcx, 12
  | shufps xmm0, xmm0, _MM_SHUFFLE(0, 0, 0, 0)
  | shufps xmm1, xmm1, _MM_SHUFFLE(0, 0, 0, 0)
  | xorps xmm2, xmm2
  | subps xmm2, xmm0 // -sin
  | movaps xmm3, xmm8
  | mulps xmm3, xmm1 // m0X * rm00
  | movaps xmm4, xmm10
  | mulps xmm4, xmm2 // m2X * rm02
  | addps xmm3, xmm4
  | movaps xmm4, xmm8
  | mulps xmm4, xmm0 // m0X * rm20
  | movaps xmm5, xmm10
  | mulps xmm5, xmm1 // m2X * rm22
  | addps xmm4, xmm5
  | movaps xmm8, xmm3
  | movaps xmm10, xmm4
}

static void matrix_get(dasm_State** Dst) {
  | mov r8, [rcx]
  | add rcx, 16
  | movaps [r8], xmm8
  | movaps [r8+4*4], xmm9
  | movaps [r8+4*8], xmm10
  | movaps [r8+4*12], xmm11
}

static void matrix_identity(dasm_State** Dst) {
  | mov r9, 0x3f800000 // int representation of 1.0f
  | movd xmm8, r9
  | movaps xmm9, xmm8
  | shufps xmm9, xmm9, 0x93
  | movaps xmm10, xmm9
  | shufps xmm10, xmm10, 0x93
  | movaps xmm11, xmm10
  | shufps xmm11, xmm11, 0x93
}

batch_func_t codegen(const char* opcodes, int opcodesLength, size_t* codeSize) {
  dasm_State* state;
  dasm_State** Dst = &state;
  int status;
  void* code;
  DWORD dwOld;
  void* global_labels[GLOB__MAX];
  dasm_init(&state, DASM_MAXSECTION);
  dasm_setupglobal(&state, global_labels, GLOB__MAX);
  dasm_setup(&state, actionlist);
  for (int i = 0; i < opcodesLength; i++) {
    switch (opcodes[i]) {
    case OPCODE_MATRIX_MUL_MATRIX:
      mul_matrix_matrix(&state); break;
    case OPCODE_MATRIX_TRANSPOSE:
      matrix_transpose(&state); break;
    case OPCODE_MATRIX_GET:
      matrix_get(&state); break;
    case OPCODE_MATRIX_IDENTITY:
      matrix_identity(&state); break;
    case OPCODE_ROTATEY:
      rotateY(&state); break;
    default:
      break;
    }
  }
  | ret
  status = dasm_link(&state, codeSize);
  code = VirtualAlloc(0, *codeSize, MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE);
  status = dasm_encode(&state, code);
  VirtualProtect(code, *codeSize, PAGE_EXECUTE, &dwOld);
  FlushInstructionCache(GetCurrentProcess(), code, *codeSize);
  dasm_free(&state);
  return (batch_func_t) code;
}

int free_code(void* code, size_t codeSize) {
  return VirtualFree(code, 0, MEM_RELEASE);
}
