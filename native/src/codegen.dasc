#include <stdlib.h>
#include <Windows.h>

#include "dynasm/dasm_proto.h"
#include "dynasm/dasm_x86.h"
#include "codegen.h"

|.arch x64
|.section code
|.globals GLOB_
|.actionlist actionlist

#ifndef _MM_SHUFFLE
#define _MM_SHUFFLE(x,y,z,w) ((z << 6) | (y <<4) | (x << 2) | (w))
#endif

/**
 * Transpose a matrix using raw SSE shufps instructions.
 */
static void matrix_transpose(dasm_State** Dst) {
  |->matrix_transpose:
  // obtain matrix from [rcx]
  | mov r8, [rcx]
  | add rcx, 8
  // obtain dest matrix
  | mov r9, [rcx]
  | add rcx, 8
  // shuffle around a bit
  | movaps xmm0, [r8]
  | movaps xmm2, xmm0
  | movaps xmm1, [r8+4*4]
  | shufps xmm0, xmm1, 0x88
  | shufps xmm2, xmm1, 0xdd
  | movaps xmm3, [r8+8*4]
  | movaps xmm5, xmm3
  | movaps xmm6, [r8+12*4]
  | shufps xmm3, xmm6, 0x88
  | shufps xmm5, xmm6, 0xdd
  | movaps xmm1, xmm0
  | shufps xmm0, xmm3, 0x88
  | movaps xmm4, xmm2
  | shufps xmm2, xmm5, 0x88
  | shufps xmm1, xmm3, 0xdd
  | shufps xmm4, xmm6, 0xdd
  // store back into dest matrix at [r9]
  | movaps [r9], xmm0
  | movaps [r9+4*4], xmm2
  | movaps [r9+8*4], xmm1
  | movaps [r9+12*4], xmm4
}

static void linearProduct(dasm_State** Dst) {
  // create xmm1-xmm4 containing the i'th column of the second matrix to be multiplied by the first matrix
  | movaps xmm1, xmm0
  | shufps xmm1, xmm1, _MM_SHUFFLE(0, 0, 0, 0)
  | movaps xmm2, xmm0
  | shufps xmm2, xmm2, _MM_SHUFFLE(1, 1, 1, 1)
  | movaps xmm3, xmm0
  | shufps xmm3, xmm3, _MM_SHUFFLE(2, 2, 2, 2)
  | movaps xmm4, xmm0
  | shufps xmm4, xmm4, _MM_SHUFFLE(3, 3, 3, 3)
  | movaps xmm0, [r8]
  | mulps xmm0, xmm1
  | movaps xmm1, [r8+4*4]
  | mulps xmm1, xmm2
  | movaps xmm2, [r8+4*8]
  | mulps xmm2, xmm3
  | movaps xmm3, [r8+4*12]
  | mulps xmm3, xmm4
  | addps xmm0, xmm1
  | addps xmm2, xmm3
  | addps xmm0, xmm2
  // result is in xmm0
}

static void mul_matrix_matrix(dasm_State** Dst) {
  |->mul_matrix_matrix:
  // obtain first matrix
  | mov r8, [rcx]
  | add rcx, 8
  // obtain second matrix
  | mov r9, [rcx]
  | add rcx, 8
  for (int i = 0; i < 4; i++) {
    // get i-th column of second matrix
    | movaps xmm0, [r9+4*4*i]
    linearProduct(Dst);
    /* We must be careful to not overwrite the destination
       matrix with the column results, since that matrix
       is needed in subsequence linearProducts.
       Luckily, we have 8 XMM registers, and can 
       buffer the first three results into them and
       during the last iteration we store all of them
       including xmm0 of that computation into the destination
       matrix. */
    if (i == 0) {
      | movaps xmm5, xmm0
    } else if (i == 1) {
      | movaps xmm6, xmm0
    } else if (i == 2) {
      | movaps xmm7, xmm0
    } else if (i == 3) {
      // obtain dest matrix
      | mov r8, [rcx]
      | add rcx, 16
      | movaps [r8], xmm5
      | movaps [r8+4*4], xmm6
      | movaps [r8+8*4], xmm7
      | movaps [r8+12*4], xmm0
    }
  }
}

/**
 * Fast matrix-vector multiplication.
 * 
 * Adapted from GCC intrinsics of:
 * http://stackoverflow.com/questions/14967969/efficient-4x4-matrix-vector-multiplication-with-sse-horizontal-add-and-dot-prod
 */
static void mul_matrix_vector(dasm_State** Dst) {
  |->mul_matrix_vector:
  // obtain vector
  | mov r8, [rcx]
  | add rcx, 8
  | movaps xmm0, [r8]

  // create xmm1-xmm4 containing the vectors to be multiplied
  | movaps xmm1, xmm0
  | shufps xmm1, xmm1, _MM_SHUFFLE(0, 0, 0, 0)
  | movaps xmm2, xmm0
  | shufps xmm2, xmm2, _MM_SHUFFLE(1, 1, 1, 1)
  | movaps xmm3, xmm0
  | shufps xmm3, xmm3, _MM_SHUFFLE(2, 2, 2, 2)
  | movaps xmm4, xmm0
  | shufps xmm4, xmm4, _MM_SHUFFLE(3, 3, 3, 3)

  // obtain matrix
  | mov r9, [rcx]
  | add rcx, 8

  // load first matrix column and multiply with xmm1
  | movaps xmm0, [r9]
  | mulps xmm0, xmm1
  // load second matrix column and multiply with xmm2
  | movaps xmm1, [r9+4*4]
  | mulps xmm1, xmm2
  // load third matrix column and multiply with xmm3
  | movaps xmm2, [r9+4*8]
  | mulps xmm2, xmm3
  // load fourth matrix column and multiply with xmm4
  | movaps xmm3, [r9+4*12]
  | mulps xmm3, xmm4
  // now the results are in xmm0-xmm3 and need to be added
  | addps xmm0, xmm1
  | addps xmm2, xmm3
  | addps xmm0, xmm2

  // write final result in xmm0 to dest vector
  | mov r8, [rcx]
  | add rcx, 16
  | movaps [r8], xmm0
}

static void translation_rotate_scale(dasm_State** Dst) {
  |->translation_rotate_scale:
  // obtain matrix
  | mov r8, [rcx]
  | add rcx, 16
  // store translation in xmm0
  | movaps xmm0, [rcx]
  | add rcx, 16
  // store quaternion in xmm1
  | movaps xmm1, [rcx]
  | add rcx, 16
  // store scale in xmm2
  | movaps xmm2, [rcx]
  | add rcx, 16

  // TODO: Here we need to actually do what Matrix4f.translationRotateScale() does,
  //       just only better.
  | movaps xmm3, xmm1
  | addps xmm3, xmm3 // dqX
  | movaps xmm4, xmm3
  | mulps xmm4, xmm1 // qNN
  | movaps xmm5, xmm1
  | shufps xmm5, xmm5, _MM_SHUFFLE(1, 2, 3, 0)
  | mulps xmm5, xmm3 // q0N
  | movaps xmm6, xmm1
  | movaps xmm7, xmm3
  | shufps xmm6, xmm6, _MM_SHUFFLE(2, 3, 3, 2)
  | shufps xmm7, xmm7, _MM_SHUFFLE(1, 1, 2, 2)
  | mulps xmm6, xmm7 // q12-23
  // xmm1, xmm3, xmm7 are free here!
  // the above covers the computation of the qXX floats
  // from the Java sources.
  // now comes the computation of the final matrix elements
  /*
        m00 = sx - (q11 + q22) * sx;
        m01 = 0  + (q01 + q23) * sx;
        m02 = 0  + (q02 - q13) * sx;
        m03 = 0  + (q02 + q13) * 0;
  */
  // TODO: store result in dest matrix
  | mov r8, [rcx]
  | add rcx, 16
}

static void rotateY(dasm_State** Dst) {
/* Java code:
        float rm00 = cos;
        float rm02 = -sin;
        float rm20 = sin;
        float rm22 = cos;
        float nm00 = m00 * rm00 + m20 * rm02;
        float nm01 = m01 * rm00 + m21 * rm02;
        float nm02 = m02 * rm00 + m22 * rm02;
        float nm03 = m03 * rm00 + m23 * rm02;
        dest.m20 = m00 * rm20 + m20 * rm22;
        dest.m21 = m01 * rm20 + m21 * rm22;
        dest.m22 = m02 * rm20 + m22 * rm22;
        dest.m23 = m03 * rm20 + m23 * rm22;
*/
  |->rotateY:
  | mov r8, [rcx]
  | add rcx, 8
  | movss xmm0, dword [rcx] // sin
  | add rcx, 4
  | movss xmm1, dword [rcx] // cos
  | add rcx, 4
  | shufps xmm0, xmm0, _MM_SHUFFLE(0, 0, 0, 0)
  | shufps xmm1, xmm1, _MM_SHUFFLE(0, 0, 0, 0)
  | xorps xmm2, xmm2
  | subps xmm2, xmm0 // -sin
  | movaps xmm3, [r8]
  | mulps xmm3, xmm1 // m0X * rm00
  | movaps xmm4, [r8+4*8]
  | mulps xmm4, xmm2 // m2X * rm02
  | addps xmm3, xmm4
  | movaps xmm4, [r8]
  | mulps xmm4, xmm0 // m0X * rm20
  | movaps xmm5, [r8+4*8]
  | mulps xmm5, xmm1 // m2X * rm22
  | addps xmm4, xmm5
  // obtain dest matrix
  | mov r9, [rcx]
  | add rcx, 16
  | movaps [r9], xmm3
  | movaps [r9+4*8], xmm4
  | movaps xmm0, [r8+4*4]
  | movaps [r9+4*4], xmm0
  | movaps xmm1, [r8+4*12]
  | movaps [r9+4*12], xmm1
}

static void rotateX(dasm_State** Dst) {
/* Java code:
        float rm11 = cos;
        float rm12 = sin;
        float rm21 = -sin;
        float rm22 = cos;
        float nm10 = m10 * rm11 + m20 * rm12;
        float nm11 = m11 * rm11 + m21 * rm12;
        float nm12 = m12 * rm11 + m22 * rm12;
        float nm13 = m13 * rm11 + m23 * rm12;
        dest.m20 = m10 * rm21 + m20 * rm22;
        dest.m21 = m11 * rm21 + m21 * rm22;
        dest.m22 = m12 * rm21 + m22 * rm22;
        dest.m23 = m13 * rm21 + m23 * rm22;
*/
  |->rotateX:
  | mov r8, [rcx]
  | add rcx, 8
  | movss xmm0, dword [rcx] // sin
  | add rcx, 4
  | movss xmm1, dword [rcx] // cos
  | add rcx, 4
  | shufps xmm0, xmm0, _MM_SHUFFLE(0, 0, 0, 0)
  | shufps xmm1, xmm1, _MM_SHUFFLE(0, 0, 0, 0)
  | xorps xmm2, xmm2
  | subps xmm2, xmm0 // -sin
  | movaps xmm3, [r8+4*4]
  | mulps xmm3, xmm1 // m1X * rm11
  | movaps xmm4, [r8+4*8]
  | mulps xmm4, xmm0 // m2X * rm12
  | addps xmm3, xmm4
  | movaps xmm4, [r8+4*4]
  | mulps xmm4, xmm2 // m1X * rm21
  | movaps xmm5, [r8+4*8]
  | mulps xmm5, xmm1 // m2X * rm22
  | addps xmm4, xmm5
  // obtain dest matrix
  | mov r9, [rcx]
  | add rcx, 16
  | movaps [r9+4*4], xmm3
  | movaps [r9+4*8], xmm4
  | movaps xmm0, [r8]
  | movaps [r9], xmm0
  | movaps xmm1, [r8+4*12]
  | movaps [r9+4*12], xmm1
}

static void rotateZ(dasm_State** Dst) {
  |->rotateZ:
  | mov r8, [rcx]
  | add rcx, 8
  | movss xmm0, dword [rcx] // sin
  | add rcx, 4
  | movss xmm1, dword [rcx] // cos
  | add rcx, 4
  | shufps xmm0, xmm0, _MM_SHUFFLE(0, 0, 0, 0)
  | shufps xmm1, xmm1, _MM_SHUFFLE(0, 0, 0, 0)
  | xorps xmm2, xmm2
  | subps xmm2, xmm0 // -sin
  | movaps xmm3, [r8]
  | mulps xmm3, xmm1 // m0X * rm00
  | movaps xmm4, [r8+4*4]
  | mulps xmm4, xmm0 // m1X * rm01
  | addps xmm3, xmm4
  | movaps xmm4, [r8]
  | mulps xmm4, xmm2 // m0X * rm10
  | movaps xmm5, [r8+4*4]
  | mulps xmm5, xmm1 // m1X * rm11
  | addps xmm4, xmm5
  // obtain dest matrix
  | mov r9, [rcx]
  | add rcx, 16
  | movaps [r9], xmm3
  | movaps [r9+4*4], xmm4
  | movaps xmm0, [r8+4*8]
  | movaps [r9+4*8], xmm0
  | movaps xmm1, [r8+4*12]
  | movaps [r9+4*12], xmm1
}

static void vector_negate(dasm_State** Dst) {
  |->vector_negate:
  // obtain vector
  | mov r8, [rcx]
  | add rcx, 8
  | movaps xmm0, [r8]
  | xorps xmm1, xmm1 // make it zero
  | subps xmm1, xmm0 // xmm1 = xmm1 - xmm0
  // obtain dest vector
  | mov r8, [rcx]
  | add rcx, 8
  | movaps [r8], xmm1
}

static void matrix_rotate_quaternion(dasm_State** Dst) {
  |->matrix_rotate_quaternion:
  // obtain matrix
  | mov r8, [rcx]
  | add rcx, 16
  // obtain quaternion (x,y,z,w)
  | movaps xmm0, [rcx]
  | add rcx, 16
  // compute the qXX values
  | movaps xmm1, xmm0
  | addps xmm1, xmm1 // dqX
  | movaps xmm2, xmm1
  | mulps xmm2, xmm0 // qNN
  | movaps xmm3, xmm0
  | shufps xmm3, xmm3, _MM_SHUFFLE(1, 2, 3, 0)
  | mulps xmm3, xmm1 // q0N
  | movaps xmm4, xmm0
  | movaps xmm5, xmm1
  | shufps xmm4, xmm4, _MM_SHUFFLE(2, 3, 3, 2)
  | shufps xmm5, xmm5, _MM_SHUFFLE(1, 1, 2, 2)
  | mulps xmm4, xmm5 // q12-23
  // xmm0, xmm1, xmm6, xmm7 are free here
  // compute final matrix elements
  
  /*
        float rm00 = 1.0f - q11 - q22;
        float rm01 = 0.0f + q01 + q23;
        float rm02 = 0.0f + q02 - q13;
        float rm0_ = ---;
  */
  // puh...
}

static void matrix_get(dasm_State** Dst) {
  |->matrix_get:
  // obtain matrix address
  | mov r8, [rcx]
  | add rcx, 8
  // obtain destination buffer address
  | mov r9, [rcx]
  | add rcx, 8
  // use movaps to copy the 4 columns
  | movaps xmm0, [r8]
  | movaps [r9], xmm0
  | movaps xmm1, [r8+4*4]
  | movaps [r9+4*4], xmm1
  | movaps xmm0, [r8+4*8]
  | movaps [r9+4*8], xmm0
  | movaps xmm1, [r8+4*12]
  | movaps [r9+4*12], xmm1
}

static void matrix_identity(dasm_State** Dst) {
  |->matrix_identity:
  // obtain matrix address
  | mov r8, [rcx]
  | add rcx, 16
  | mov r9, 0x3f800000 // int representation of 1.0f
  | movd xmm0, r9
  | movaps xmm1, xmm0
  | shufps xmm1, xmm1, 0x93
  | movaps xmm2, xmm1
  | shufps xmm2, xmm2, 0x93
  | movaps xmm3, xmm2
  | shufps xmm3, xmm3, 0x93
  | movaps [r8], xmm0
  | movaps [r8+4*4], xmm1
  | movaps [r8+4*8], xmm2
  | movaps [r8+4*12], xmm3
}

static void matrix_scale(dasm_State** Dst) {
  |->matrix_scale:
  // obtain matrix address
  | mov r8, [rcx]
  | add rcx, 8
  // obtain dest matrix address
  | mov r9, [rcx]
  | add rcx, 8
  // get scale factor (x, y, z, 1)
  | movaps xmm0, [rcx]
  | add rcx, 16
  | movaps xmm1, xmm0
  | shufps xmm1, xmm1, _MM_SHUFFLE(0, 0, 0, 0)
  | movaps xmm2, [r8]
  | mulps xmm2, xmm1
  | movaps [r9], xmm2
  | movaps xmm1, xmm0
  | shufps xmm1, xmm1, _MM_SHUFFLE(1, 1, 1, 1)
  | movaps xmm2, [r8+4*4]
  | mulps xmm2, xmm1
  | movaps [r9+4*4], xmm2
  | movaps xmm1, xmm0
  | shufps xmm1, xmm1, _MM_SHUFFLE(2, 2, 2, 2)
  | movaps xmm2, [r8+4*8]
  | mulps xmm2, xmm1
  | movaps [r9+4*8], xmm2
  | movaps xmm1, [r8+4*12]
  | movaps [r9+4*12], xmm1
}

static void matrix_translate(dasm_State** Dst) {
/*
        dest.m30 = m00 * x + m10 * y + m20 * z + m30;
        dest.m31 = m01 * x + m11 * y + m21 * z + m31;
        dest.m32 = m02 * x + m12 * y + m22 * z + m32;
        dest.m33 = m03 * x + m13 * y + m23 * z + m33;
*/
  |->matrix_translate:
  // obtain matrix address
  | mov r8, [rcx]
  | add rcx, 8
  // obtain dest matrix address
  | mov r9, [rcx]
  | add rcx, 8
  // get translation (x, y, z, 1)
  | movaps xmm0, [rcx]
  | add rcx, 16
  | movaps xmm1, xmm0
  | shufps xmm1, xmm1, _MM_SHUFFLE(0, 0, 0, 0)
  | movaps xmm2, [r8]
  | mulps xmm2, xmm1 // m0X * x
  | movaps xmm1, xmm0
  | shufps xmm1, xmm1, _MM_SHUFFLE(1, 1, 1, 1)
  | movaps xmm3, [r8+4*4]
  | mulps xmm3, xmm1 // m1X * y
  | addps xmm2, xmm3 // +
  | movaps xmm1, xmm0
  | shufps xmm1, xmm1, _MM_SHUFFLE(2, 2, 2, 2)
  | movaps xmm3, [r8+4*8]
  | mulps xmm3, xmm1 // m2X * z
  | addps xmm2, xmm3 // +
  | movaps xmm1, [r8+4*12]
  | addps xmm2, xmm1 // + m3N
  | movaps xmm0, [r8]
  | movaps [r9], xmm0
  | movaps xmm1, [r8+4*4]
  | movaps [r9+4*4], xmm1
  | movaps xmm0, [r8+4*8]
  | movaps [r9+4*8], xmm0
  | movaps [r9+4*12], xmm2
}

batch_func_t codegen(const char* opcodes, int opcodesLength, size_t* codeSize) {
  dasm_State* state;
  dasm_State** Dst = &state;
  int status;
  void* code;
  int next_pc = 0;
  DWORD dwOld;
  void* global_labels[GLOB__MAX];
  char op_generated[] =
  {0, 0, 0, 0, 0,
   0, 0, 0, 0, 0, 
   0, 0, 0, 0};
  dasm_init(&state, DASM_MAXSECTION);
  dasm_setupglobal(&state, global_labels, GLOB__MAX);
  dasm_setup(&state, actionlist);
  dasm_growpc(&state, opcodesLength);
  for (int i = 0; i < opcodesLength; i++) {
    | mov rdx, =>next_pc
    switch (opcodes[i]) {
    case 0x01: // OPCODE_MATRIX_MUL_MATRIX
      | jmp ->mul_matrix_matrix
      if (!op_generated[0]) {
        mul_matrix_matrix(&state);
        | jmp rdx
        op_generated[0] = 1;
      }
      break;
    case 0x02: // OPCODE_MATRIX_MUL_VECTOR
      | jmp ->mul_matrix_vector
      if (!op_generated[1]) {
        mul_matrix_vector(&state);
        | jmp rdx
        op_generated[1] = 1;
      }
      break;
    case 0x03: // OPCODE_MATRIX_TRANSPOSE
      | jmp ->matrix_transpose
      if (!op_generated[2]) {
        matrix_transpose(&state);
        | jmp rdx
        op_generated[2] = 1;
      }
      break;
    case 0x04: // OPCODE_MATRIX_INVERT
      // Not yet implemented!
      break;
    case 0x05: // OPCODE_TRANSLATION_ROTATE_SCALE
      | jmp ->translation_rotate_scale
      if (!op_generated[4]) {
        translation_rotate_scale(&state);
        | jmp rdx
        op_generated[4] = 1;
      }
      break;
    case 0x06: // OPCODE_ROTATEZ
      | jmp ->rotateZ
      if (!op_generated[5]) {
        rotateZ(&state);
        | jmp rdx
        op_generated[5] = 1;
      }
      break;
    case 0x07: // OPCODE_VECTOR_NEGATE
      | jmp ->vector_negate
      if (!op_generated[6]) {
        vector_negate(&state);
        | jmp rdx
        op_generated[6] = 1;
      }
      break;
    case 0x08: // OPCODE_MATRIX_ROTATE_QUATERNION
      | jmp ->matrix_rotate_quaternion
      if (!op_generated[7]) {
        matrix_rotate_quaternion(&state);
        | jmp rdx
        op_generated[7] = 1;
      }
      break;
    case 0x09: // OPCODE_MATRIX_GET
      | jmp ->matrix_get
      if (!op_generated[8]) {
        matrix_get(&state);
        | jmp rdx
        op_generated[8] = 1;
      }
      break;
    case 0x0A: // OPCODE_MATRIX_IDENTITY
      | jmp ->matrix_identity
      if (!op_generated[9]) {
        matrix_identity(&state);
        | jmp rdx
        op_generated[9] = 1;
      }
      break;
    case 0x0B: // OPCODE_ROTATEX
      | jmp ->rotateX
      if (!op_generated[10]) {
        rotateX(&state);
        | jmp rdx
        op_generated[10] = 1;
      }
      break;
    case 0x0C: // OPCODE_ROTATEY
      | jmp ->rotateY
      if (!op_generated[11]) {
        rotateY(&state);
        | jmp rdx
        op_generated[11] = 1;
      }
      break;
    case 0x0D: // OPCODE_MATRIX_SCALE
      | jmp ->matrix_scale
      if (!op_generated[12]) {
        matrix_scale(&state);
        | jmp rdx
        op_generated[12] = 1;
      }
      break;
    case 0x0E: // OPCODE_MATRIX_TRANSLATE
      | jmp ->matrix_translate
      if (!op_generated[13]) {
        matrix_translate(&state);
        | jmp rdx
        op_generated[13] = 1;
      }
      break;
    default:
      break;
    }
    |=>next_pc:
    next_pc++;
  }
  | ret
  status = dasm_link(&state, codeSize);
  code = VirtualAlloc(0, *codeSize, MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE);
  status = dasm_encode(&state, code);
  VirtualProtect(code, *codeSize, PAGE_EXECUTE, &dwOld);
  FlushInstructionCache(GetCurrentProcess(), code, *codeSize);
  dasm_free(&state);
  return (batch_func_t) code;
}

int free_code(void* code, size_t codeSize) {
  return VirtualFree(code, 0, MEM_RELEASE);
}
