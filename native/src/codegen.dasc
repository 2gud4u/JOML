#include <stdio.h>
#include <stdlib.h>
#include <Windows.h>

#include "dynasm/dasm_proto.h"
#include "dynasm/dasm_x86.h"
#include "codegen.h"

|.arch x64
|.section code
|.globals GLOB_
|.actionlist actionlist

#ifndef _MM_SHUFFLE
#define _MM_SHUFFLE(x,y,z,w) ((z << 6) | (y <<4) | (x << 2) | (w))
#endif

static void preamble(dasm_State** Dst) {
}

static void epilogue(dasm_State** Dst) {
}

/**
 * Fast matrix-vector multiplication.
 * 
 * Adapted from GCC intrinsics of:
 * http://stackoverflow.com/questions/14967969/efficient-4x4-matrix-vector-multiplication-with-sse-horizontal-add-and-dot-prod
 */
static void mul_matrix_vector(dasm_State** Dst) {
  // obtain vector
  | mov r8, [rcx]
  | movaps xmm0, [r8]

  // create xmm1-xmm4 containing the vectors to be multiplied
  | movaps xmm1, xmm0
  | shufps xmm1, xmm1, _MM_SHUFFLE(0, 0, 0, 0)
  | movaps xmm2, xmm0
  | shufps xmm2, xmm2, _MM_SHUFFLE(1, 1, 1, 1)
  | movaps xmm3, xmm0
  | shufps xmm3, xmm3, _MM_SHUFFLE(2, 2, 2, 2)
  | movaps xmm4, xmm0
  | shufps xmm4, xmm4, _MM_SHUFFLE(3, 3, 3, 3)

  // move to matrix
  | add rcx, sizeof(char*)
  | mov r9, [rcx]

  // load first matrix column and multiply with xmm1
  | movaps xmm0, [r9]
  | mulps xmm0, xmm1
  // load second matrix column and multiply with xmm2
  | movaps xmm1, [r9+4*4]
  | mulps xmm1, xmm2
  // load third matrix column and multiply with xmm3
  | movaps xmm2, [r9+4*8]
  | mulps xmm2, xmm3
  // load fourth matrix column and multiply with xmm4
  | movaps xmm3, [r9+4*12]
  | mulps xmm3, xmm4
  // now the results are in xmm0-xmm3 and need to be added
  | addps xmm0, xmm1
  | addps xmm2, xmm3
  | addps xmm0, xmm2

  // write final result in xmm0 back into vector
  | movaps [r8], xmm0
}

batch_func_t codegen(const char* opcodes, int opcodesLength) {
  dasm_State* state;
  dasm_State** Dst = &state;
  int status;
  void* code;
  size_t code_size;
  DWORD dwOld;
  void* global_labels[GLOB__MAX];
  dasm_init(&state, DASM_MAXSECTION);
  dasm_setupglobal(&state, global_labels, GLOB__MAX);
  dasm_setup(&state, actionlist);
  preamble(&state);
  for (int i = 0; i < opcodesLength; i++) {
    switch (opcodes[i]) {
    case 0x02: // OPCODE_MUL_VECTOR
      mul_matrix_vector(&state);
      break;
    default:
      break;
    }
  }
  epilogue(&state);
  | ret
  status = dasm_link(&state, &code_size);
  code = VirtualAlloc(0, code_size, MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE);
  status = dasm_encode(&state, code);
  VirtualProtect(code, code_size, PAGE_EXECUTE, &dwOld);
  FlushInstructionCache(GetCurrentProcess(), code, code_size);
  dasm_free(&state);
  return (batch_func_t) code;
}
